import "hashes/sha256/512bit" as sha256;
import "utils/pack/u32/pack256" as pack256;
import "utils/casts/field_to_u32" as toU32;

const u32 VECTOR_SIZE = 16;
const u32 POPULATION_SIZE = 8;

def main(u32[POPULATION_SIZE][VECTOR_SIZE] population) -> field {

	u32[POPULATION_SIZE] mut solution_commitments = [0; POPULATION_SIZE];

	for u32 i in 0..POPULATION_SIZE {
		u32[8] solution_commitment_unpacked = sha256(population[i][0..8], population[i][8..16]);
		solution_commitments[i] = toU32(pack256(solution_commitment_unpacked));

		for u32 j in 0..VECTOR_SIZE {
			assert(population[i][j] == 0 || population[i][j] == 1);
		}
	}

	u32[8] population_commitment_unpacked = sha256(solution_commitments[0..8], solution_commitments[0..8]);
	field population_commitment = pack256(population_commitment_unpacked);
	return population_commitment;
}
